<?xml version="1.0"?>
<doc>
    <assembly>
        <name>csredis</name>
    </assembly>
    <members>
        <member name="T:ctstone.Redis.RedisSubscriptionChangedEventArgs">
            <summary>
            Provides data for the event that is raised when a subscription channel is opened or closed
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionChangedEventArgs.#ctor(ctstone.Redis.RedisSubscriptionChannel)">
            <summary>
            Instantiate new instance of the RedisSubscriptionChangedEventArgs class
            </summary>
            <param name="response">The Redis server response</param>
        </member>
        <member name="P:ctstone.Redis.RedisSubscriptionChangedEventArgs.Response">
            <summary>
            The subscription response
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSubscriptionReceivedEventArgs">
            <summary>
            Provides data for the event that is raised when a subscription message is received
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionReceivedEventArgs.#ctor(ctstone.Redis.RedisSubscriptionMessage)">
            <summary>
            Instantiate a new instance of the RedisSubscriptionReceivedEventArgs class
            </summary>
            <param name="message">The Redis server message</param>
        </member>
        <member name="P:ctstone.Redis.RedisSubscriptionReceivedEventArgs.Message">
            <summary>
            The subscription message
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisTransactionQueuedEventArgs">
            <summary>
            Provides data for the event that is raised when a transaction command has been processed by the server
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisTransactionQueuedEventArgs.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisTransactionQueuedEventArgs class
            </summary>
            <param name="status">Server status code</param>
        </member>
        <member name="P:ctstone.Redis.RedisTransactionQueuedEventArgs.Status">
            <summary>
            The status code of the transaction command
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisMonitorEventArgs">
            <summary>
            Provides data for the event that is raised when a Redis MONITOR message is received
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisMonitorEventArgs.#ctor(System.Object)">
            <summary>
            Instantiate a new instance of the RedisMonitorEventArgs class
            </summary>
            <param name="message">The Redis server message</param>
        </member>
        <member name="P:ctstone.Redis.RedisMonitorEventArgs.Message">
            <summary>
            Monitor output
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisException">
            <summary>
            Represents a Redis server error reply
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisException class
            </summary>
            <param name="message">Server response</param>
        </member>
        <member name="T:ctstone.Redis.RedisProtocolException">
            <summary>
            The exception that is thrown when an unexpected value is found in a Redis request or response 
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisProtocolException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisProtocolException class
            </summary>
            <param name="message">Protocol violoation message</param>
        </member>
        <member name="E:ctstone.Redis.RedisSubscriptionHandler.SubscriptionReceived">
            <summary>
            Occurs when a subscription message has been received
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisSubscriptionHandler.SubscriptionChanged">
            <summary>
            Occurs when a subsciption channel is opened or closed
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisMonitorHandler.MonitorReceived">
            <summary>
            Occurs when a monitor response is received
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisArgs.Epoch">
            <summary>
            Represents UNIX Epoch (Jan 1, 1970 00:00:00 UTC)
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisArgs.Concat(System.Object[][])">
            <summary>
            Join arrays
            </summary>
            <param name="arrays">Arrays to join</param>
            <returns>Array of ToString() elements in each array</returns>
        </member>
        <member name="M:ctstone.Redis.RedisArgs.Concat(System.String,System.Object[])">
            <summary>
            Joine string with arrays
            </summary>
            <param name="str">Leading string element</param>
            <param name="arrays">Array to join</param>
            <returns>Array of str and ToString() elements of arrays</returns>
        </member>
        <member name="M:ctstone.Redis.RedisArgs.GetTupleArgs``2(System.Tuple{``0,``1}[])">
            <summary>
            Convert array of two-element tuple into flat array arguments
            </summary>
            <typeparam name="TItem1">Type of first item</typeparam>
            <typeparam name="TItem2">Type of second item</typeparam>
            <param name="tuples">Array of tuple arguments</param>
            <returns>Flattened array of arguments</returns>
        </member>
        <member name="M:ctstone.Redis.RedisArgs.GetScore(System.Double,System.Boolean)">
            <summary>
            Parse score for +/- infinity and inclusive/exclusive
            </summary>
            <param name="score">Numeric base score</param>
            <param name="isExclusive">Score is exclusive, rather than inclusive</param>
            <returns>String representing Redis score/range notation</returns>
        </member>
        <member name="T:ctstone.Redis.RedisClientAsync">
            <summary>
            Asynchronous Redis client
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Instantiate a new instance of the RedisClientAsync class
            </summary>
            <param name="host">Redis host</param>
            <param name="port">Redis port</param>
            <param name="timeoutMilliseconds">Connection timeout in milliseconds (0 for no timeout)</param>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Clone">
            <summary>
            Get a synchronous RedisClient for blocking calls (e.g. BLPop, Subscriptions, Transactions, etc)
            </summary>
            <returns>RedisClient to be used in single thread context</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.GetSubscriptionChannel">
            <summary>
            Get a thread-safe, reusable subscription channel.
            </summary>
            <returns>A reusable subscription channel</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.CloseSubscriptionChannel">
            <summary>
            Close the subscription channel if it is not already Disposed. The channel will be made unusable for the remainder of the current RedisClientAsync.
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Call(System.String,System.String[])">
            <summary>
            Call arbitrary redis command (e.g. for a command not yet implemented in this package)
            </summary>
            <param name="command">The name of the command</param>
            <param name="args">Array of arguments to the command</param>
            <returns>Task returning Redis unified response</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Wait``1(System.Func{ctstone.Redis.RedisClientAsync,System.Threading.Tasks.Task{``0}})">
            <summary>
            Block the current thread and wait for the given Redis command to complete
            </summary>
            <typeparam name="T">Redis command return type</typeparam>
            <param name="func">Redis command method</param>
            <returns>Redis command output</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Auth(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Server password</param>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Echo(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Task associated with echo response</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Ping">
            <summary>
            Ping the server
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Quit">
            <summary>
            Close the connection
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Del(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Dump(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Exists(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Expire(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Expire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.ExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second)
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.ExpireAt(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Keys(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Migrate(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Migrate(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Move(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Persist(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.PExpire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.PExpire(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.PExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond)
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.PExpireAt(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.PTtl(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.RandomKey">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Rename(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.RenameNx(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Restore(System.String,System.Int64,System.String)">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttl">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Sort(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{ctstone.Redis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{ctstone.Redis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Ttl(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Type(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClientAsync.Dispose">
            <summary>
            Release resources used by the current RedisClientAsync instance
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisClientAsync.Connected">
            <summary>
            Get a value indicating that the RedisClientAsync connection is open
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisClientAsync.Host">
            <summary>
            Get host that the current RedisClientAsync is connected to
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisClientAsync.Port">
            <summary>
            Get the port that the current RedisClientAsync is connected to
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisClientAsync.ExceptionOccurred">
            <summary>
            Occurs when a Task exception is thrown
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisConnection">
            <summary>
            Provides network connection to a Redis server
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisConnection.EOL">
            <summary>
            End-of-line string used by Redis server
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.#ctor(System.String,System.Int32)">
            <summary>
            Instantiate new instance of RedisConnection
            </summary>
            <param name="host">Redis server hostname or IP</param>
            <param name="port">Redis server port</param>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.Connect(System.Int32,System.Int32)">
            <summary>
            Open connection to the Redis server
            </summary>
            <param name="millisecondsTimeout">Timeout to wait for connection (0 for no timeout)</param>
            <param name="readTimeout">Time to wait for reading (0 for no timeout)</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.Read(System.IO.Stream,System.Int32)">
            <summary>
            Read response from server into a stream
            </summary>
            <param name="destination">The stream that will contain the contents of the server response.</param>
            <param name="bufferSize">Size of internal buffer used to copy streams</param>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read server response bytes into buffer and advance the server response stream (requires Buffering=true)
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.Read">
            <summary>
            Read next object from Redis response
            </summary>
            <returns>Next object in response buffer</returns>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.Read``1(System.Func{System.IO.Stream,``0})">
            <summary>
            Read next strongly-typed object from the Redis server
            </summary>
            <typeparam name="T">Type of object that will be read</typeparam>
            <param name="parser">Redis parser method</param>
            <returns>Next object in response buffer</returns>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.Write(System.String,System.Object[])">
            <summary>
            Write command to Redis server
            </summary>
            <param name="command">Base Redis command</param>
            <param name="arguments">Array of command arguments</param>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.Call``1(System.Func{System.IO.Stream,``0},System.String,System.Object[])">
            <summary>
            Write command to Redis server and return strongly-typed result
            </summary>
            <typeparam name="T">Type of object that will be read</typeparam>
            <param name="parser">Redis parser method</param>
            <param name="command">Base Redis command</param>
            <param name="arguments">Array of command arguments</param>
            <returns>Command response</returns>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.CallAsync``1(System.Func{System.IO.Stream,``0},System.String,System.Object[])">
            <summary>
            Asyncronously write command to Redis server
            </summary>
            <typeparam name="T">Type of object that will be read</typeparam>
            <param name="parser">Redis parser method</param>
            <param name="command">Base Redis command</param>
            <param name="arguments">Array of command arguments</param>
            <returns>Task that will return strongly-typed Redis response when complete</returns>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.WriteAsync(System.String,System.Object[])">
            <summary>
            Asyncronously write command to Redis request buffer
            </summary>
            <param name="command">Base Redis base command</param>
            <param name="arguments">Array of command arguments</param>
        </member>
        <member name="M:ctstone.Redis.RedisConnection.Dispose">
            <summary>
            Release resources used by the current RedisConnection
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisConnection.Host">
            <summary>
            Redis server hostname
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisConnection.Port">
            <summary>
            Redis server port
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisConnection.Connected">
            <summary>
            Get a value indicating that the Redis server connection is open
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisConnection.Buffering">
            <summary>
            Get or set the value indicating that the current connection is in read-buffering mode
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisConnection.TaskReadExceptionOccurred">
            <summary>
            Occurs when a background task raises an exception
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisClient">
            <summary>
            Synchronous Redis client 
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisClient.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Instantiate a new instance of the RedisClient class
            </summary>
            <param name="host">Redis server host</param>
            <param name="port">Redis server port</param>
            <param name="timeoutMilliseconds">Connection timeout in milliseconds (0 for no timeout)</param>
        </member>
        <member name="M:ctstone.Redis.RedisClient.StartPipe">
            <summary>
            Enter pipeline mode
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisClient.EndPipe">
            <summary>
            Commit pipeline and return results
            </summary>
            <returns>Array of all pipelined command results</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.EndPipe(System.Boolean)">
            <summary>
            Commit pipeline and optionally return results
            </summary>
            <param name="ignoreResults">Prevent allocation of result array</param>
            <returns>Array of all pipelined command results, or null if not returning results</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Redis command (e.g. for a command not yet implemented in this library)
            </summary>
            <param name="command">The name of the command</param>
            <param name="args">Array of arguments to the command</param>
            <returns>Redis unified response</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.StreamTo``1(System.IO.Stream,System.Int32,System.Func{ctstone.Redis.RedisClient,``0})">
            <summary>
            Stream response from server rather than reading all at once (BULK replies only)
            </summary>
            <typeparam name="T">Server response type</typeparam>
            <param name="destination">The stream that will contain the contents of the server response</param>
            <param name="bufferSize">Size of internal buffer used to copy streams</param>
            <param name="func">RedisClient command to execute</param>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BufferFor``1(System.Func{ctstone.Redis.RedisClient,``0})">
            <summary>
            Execute the specified command in buffered-read mode. The buffer MUST be emptied with Read() before any other commands are issued.
            </summary>
            <typeparam name="T">Server response type</typeparam>
            <param name="func">RedisClient command to execute</param>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read server response bytes into buffer and advance the server response stream (requires BufferFor())
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Auth(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Redis server password</param>
            <returns>Status message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Echo(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Ping">
            <summary>
            Ping the server
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Quit">
            <summary>
            Close the connection
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Select(System.UInt32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Del(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns>Number of keys removed</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Dump(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Exists(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns>True if key exists</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Expire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Expire(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second)
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ExpireAt(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">UNIX timestamp</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Keys(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns>Array of keys matching pattern</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Migrate(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Migrate(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Move(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns>True if key was moved</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ObjectEncoding(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Object(ctstone.Redis.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Persist(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns>True if timeout was removed</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.PExpire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.PExpire(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.PExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond)
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.PExpireAt(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.PTtl(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in milliseconds</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.RandomKey">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns>A random key</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Rename(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.RenameNx(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>True if key was renamed</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Restore(System.String,System.Int64,System.String)">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttl">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Sort(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{ctstone.Redis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>The sorted list</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{ctstone.Redis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>Number of elements stored</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Ttl(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in seconds</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Type(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns>Type of key</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HDel(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HExists(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HGet(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HGetAll``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HGetAll(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HIncrByFloat(System.String,System.String,System.Double)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HKeys(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HLen(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HMGet(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HMSet(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HMSet``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HMSet(System.String,System.String[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HSet(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HSetNx(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.HVals(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BLPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BLPop(System.Int32,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BLPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BRPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BRPop(System.Int32,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List value</param>
            <returns></returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BRPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BRPopLPush(System.String,System.String,System.TimeSpan)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LIndex(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LInsert(System.String,ctstone.Redis.RedisInsert,System.String,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LLen(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LPop(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LPush(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LPushX(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LRem(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LSet(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.RPop(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.RPopLPush(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.RPush(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.RPushX(System.String,System.Object[])">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SCard(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SDiff(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SDiffStore(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SInter(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SIsMember(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SMembers(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SMove(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SPop(System.String)">
            <summary>
            Remove and return a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SRandMember(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SRandMember(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SUnion(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZAdd``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="memberScores">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZAdd(System.String,System.String[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="memberScores">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZCard(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZCount(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZIncrBy(System.String,System.Double,System.String)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZInterStore(System.String,System.Double[],System.Nullable{ctstone.Redis.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZRange(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>Array of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZRank(System.String,System.String)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZRemRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZRevRange(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZRevRangeByScore(System.String,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZRevRank(System.String,System.String)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZScore(System.String,System.String)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ZUnionStore(System.String,System.Double[],System.Nullable{ctstone.Redis.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.PSubscribe(System.String[])">
            <summary>
            Listen for messages published to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to subscribe</param>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Publish(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.PUnsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to unsubscribe</param>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Subscribe(System.String[])">
            <summary>
            Listen for messages published to the given channels
            </summary>
            <param name="channels">Channels to subscribe</param>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Unsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to the given channels
            </summary>
            <param name="channels">Channels to unsubscribe</param>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Eval(System.String,System.String[],System.String[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.EvalSHA(System.String,System.String[],System.String[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ScriptExists(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="scripts">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ScriptFlush">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ScriptKill">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ScriptLoad(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Append(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BitCount(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BitOp(ctstone.Redis.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Decr(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.DecrBy(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Get(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.GetBit(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.GetSet(System.String,System.Object)">
            <summary>
            Set the string value of a key and return its old value
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Incr(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.IncrBy(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.IncrByFloat(System.String,System.Double)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.MGet(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.MSet(System.Tuple{System.String,System.String}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.MSet(System.String[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.MSetNx(System.Tuple{System.String,System.String}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.MSetNx(System.String[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.PSetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Set(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Set(System.String,System.Object,System.TimeSpan,System.Nullable{ctstone.Redis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Set(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{ctstone.Redis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Set(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{ctstone.Redis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off)</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SetNx(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.StrLen(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BgRewriteAof">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.BgSave">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ClientKill(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ClientList">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ClientGetName">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ClientSetName(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces)</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ConfigGet(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ConfigResetStat">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.ConfigSet(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.DbSize">
            <summary>
            Return the number of keys in the selected database
            </summary>
            <returns>Number of keys</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.DebugObject(System.String)">
            <summary>
            Get debugging information about a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.DebugSegFault">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.FlushAll">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.FlushDb">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Info(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.LastSave">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Monitor">
            <summary>
            Listen for all requests received by the server in real time
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Save">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Shutdown(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SlaveOf(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SlaveOfNoOne">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.SlowLog(ctstone.Redis.RedisSlowLog,System.String)">
            <summary>
            Manges the Redis slow queries log
            </summary>
            <param name="subCommand">Slowlog sub-command</param>
            <param name="argument">Optional argument to sub-command</param>
            <returns>Redis unified object</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Sync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Time">
            <summary>
            Return the current server time
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Discard">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Exec">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Multi">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Unwatch">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Watch(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisClient.Dispose">
            <summary>
            Release resources used by the current RedisClient instance
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisClient.Connected">
            <summary>
            Get a value indicating that the RedisClient connection is open
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisClient.Host">
            <summary>
            Get host that the current RedisClient is connected to
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisClient.Port">
            <summary>
            Get the port that the current RedisClient is connected to
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message has been received
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisClient.SubscriptionChanged">
            <summary>
            Occurs when a subsciption channel is opened or closed
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisClient.TransactionQueued">
            <summary>
            Occurs when a transaction command has been received
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisClient.MonitorReceived">
            <summary>
            Occurs when a monitor response is received
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSentinelClient">
            <summary>
            Syncronous Redis Sentinel client
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Instantiate a new instance of the RedisSentinelClient class
            </summary>
            <param name="host">Sentinel server hostname or IP</param>
            <param name="port">Sentinel server port</param>
            <param name="timeout">Connection timeout in milliseconds (0 for no timeout)</param>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Sentinel command (e.g. for a command not yet implemented in this library)
            </summary>
            <param name="command">The name of the command</param>
            <param name="args">Array of arguments to the command</param>
            <returns>Redis unified response</returns>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.Ping">
            <summary>
            Ping the Sentinel server
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.Masters">
            <summary>
            Get a list of monitored Redis masters
            </summary>
            <returns>Redis master info</returns>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.Sentinels(System.String)">
            <summary>
            Get a list of other Sentinels known to the current Sentinel
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Sentinel hosts and ports</returns>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.Slaves(System.String)">
            <summary>
            Get a list of monitored Redis slaves to the given master 
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Redis slave info</returns>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.GetMasterAddrByName(System.String)">
            <summary>
            Get the IP and port of the current master Redis server
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>IP and port of master Redis server</returns>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.Subscribe(System.String[])">
            <summary>
            Open one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channels">Name of channels to open (refer to http://redis.io/ for channel names)</param>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.Unsubscribe(System.String[])">
            <summary>
            Close one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channels">Name of channels to close</param>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.PSubscribe(System.String[])">
            <summary>
            Open one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channelPatterns">Pattern of channels to open (refer to http://redis.io/ for channel names)</param>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.PUnsubscribe(System.String[])">
            <summary>
            Close one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channelPatterns">Pattern of channels to close</param>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelClient.Dispose">
            <summary>
            Release resoures used by the current RedisSentinelClient
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisSentinelClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message has been received
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisSentinelClient.SubscriptionChanged">
            <summary>
            Occurs when a subsciption channel is opened or closed
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisSentinelClient.Connected">
            <summary>
            Get a value indicating that the RedisSentinelClient connection is open
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisSentinelClient.Host">
            <summary>
            Get host that the current RedisSentinelClient is connected to
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisSentinelClient.Port">
            <summary>
            Get the port that the current RedisSentinelClient is connected to
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisServerInfo">
            <summary>
            Base class for Redis server-info objects reported by Sentinel
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisMasterInfo">
            <summary>
            Represents a Redis master node as reported by a Redis Sentinel
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSentinelInfo">
            <summary>
            Represents a Redis Sentinel node as reported by a Redis Sentinel
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSlaveInfo">
            <summary>
            Represents a Redis slave node as reported by a Redis Setinel
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSentinelManager">
            <summary>
            Manage Redis Sentinel connections
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelManager.#ctor(System.String[])">
            <summary>
            Instantiate a new instance of the RedisSentinelManager class
            </summary>
            <param name="sentinels">array of Sentinel nodes ["host1:ip", "host2:ip", ..]</param>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelManager.GetMaster(System.String,System.Int32,System.Int32)">
            <summary>
            Connect to and return the active master Redis client
            </summary>
            <param name="masterName">Name of master</param>
            <param name="timeout">Time to wait for Sentinel response (milliseconds)</param>
            <param name="masterTimeout">Time to wait for Redis master response (milliseconds)</param>
            <returns>Connected RedisClient master, or null if cannot connect</returns>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelManager.GetSlave(System.String,System.Int32,System.Int32)">
            <summary>
            Connect to and return a Redis slave client
            </summary>
            <param name="masterName">Name of master that slave belongs to</param>
            <param name="timeout">Time to wait for Sentinel response (milliseconds)</param>
            <param name="slaveTimeout">Time to wait for Redis slave response (milliseconds)</param>
            <returns>Connected RedisClient slave, or null if cannot connect</returns>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelManager.GetSentinel(System.Int32)">
            <summary>
            Connect to and return a Redis Sentinel client
            </summary>
            <param name="timeout">Time to wait for Sentinel response (milliseconds)</param>
            <returns>Connected Sentinel client, or null if cannot connect</returns>
        </member>
        <member name="M:ctstone.Redis.RedisSentinelManager.Add(System.String,System.Int32)">
            <summary>
            Add a new Sentinel server to known hosts
            </summary>
            <param name="host">Sentinel server hostname or IP</param>
            <param name="port">Sentinel server port</param>
        </member>
        <member name="T:ctstone.Redis.RedisSubscriptionClient">
            <summary>
            Thread-safe redis subscription client
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create new instance of subscribe-only RedisClient
            </summary>
            <param name="host">Redis server host or IP</param>
            <param name="port">Redis server port</param>
            <param name="password">Redis server password</param>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionClient.Subscribe(System.String[])">
            <summary>
            Listen for messages published to the given channels
            </summary>
            <param name="channels">Channels to subscribe</param>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionClient.Subscribe(System.Action{ctstone.Redis.RedisSubscriptionMessage},System.String[])">
            <summary>
            Listen for messages published to the given channels
            </summary>
            <param name="callback">Callback for received messages on the specified channels</param>
            <param name="channels">Channels to subscribe</param>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionClient.PSubscribe(System.String[])">
            <summary>
            Listen for messages published to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to subscribe</param>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionClient.PSubscribe(System.Action{ctstone.Redis.RedisSubscriptionMessage},System.String[])">
            <summary>
            Listen for messages published to channels matching the given patterns
            </summary>
            <param name="callback">Callback for received messages on the specified channel patterns</param>
            <param name="channelPatterns">Patterns to subscribe</param>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionClient.Unsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to the given channels
            </summary>
            <param name="channels">Channels to unsubscribe</param>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionClient.PUnsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to unsubscribe</param>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionClient.Dispose">
            <summary>
            Release resources used by the current RedisSubscriptionClient
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisSubscriptionClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message has been received
            </summary>
        </member>
        <member name="E:ctstone.Redis.RedisSubscriptionClient.SubscriptionChanged">
            <summary>
            Occurs when a subsciption channel is opened or closed
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisSubscriptionClient.Connected">
            <summary>
            Get a value indicating that the current RedisSubscriptionClient is connected to the server
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisSubscriptionClient.Count">
            <summary>
            Get the total number of subscribed channels
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSubscriptionResponse">
            <summary>
            Base class for Redis pub/sub responses
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionResponse.ReadResponse(System.Object[])">
            <summary>
            Read multi-bulk response from Redis server
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="P:ctstone.Redis.RedisSubscriptionResponse.Type">
            <summary>
            The type of response
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisSubscriptionResponse.Channel">
            <summary>
            Get the channel to which the message was published, or null if not available
            </summary>
        </member>
        <member name="P:ctstone.Redis.RedisSubscriptionResponse.Pattern">
            <summary>
            Get the pattern that matched the published channel, or null if not available
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSubscriptionChannel">
            <summary>
            Represents a Redis channel in a pub/sub context
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionChannel.#ctor(ctstone.Redis.RedisSubscriptionResponseType,System.Object[])">
            <summary>
            Instantiate a new instance of the RedisSubscriptionChannel class
            </summary>
            <param name="type">The type of channel response</param>
            <param name="response">Redis multi-bulk response</param>
        </member>
        <member name="P:ctstone.Redis.RedisSubscriptionChannel.Count">
            <summary>
            Get the number of subscription channels currently open on the current connection
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSubscriptionMessage">
            <summary>
            Represents a Redis message in a pub/sub context
            </summary>
        </member>
        <member name="M:ctstone.Redis.RedisSubscriptionMessage.#ctor(ctstone.Redis.RedisSubscriptionResponseType,System.Object[])">
            <summary>
            Instantiate a new instance of the RedisSubscriptionMessage class
            </summary>
            <param name="type">The type of message response</param>
            <param name="response">Redis multi-bulk response</param>
        </member>
        <member name="P:ctstone.Redis.RedisSubscriptionMessage.Body">
            <summary>
            Get the message that was published
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisObjectSubCommand">
            <summary>
            Sub-command used by Redis OBJECT command
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisObjectSubCommand.RefCount">
            <summary>
            Return the number of references of the value associated with the specified key
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisObjectSubCommand.IdleTime">
            <summary>
            Return the number of seconds since the object stored at the specified key is idle
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSortDir">
            <summary>
            Sort direction used by Redis SORT command
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSortDir.Asc">
            <summary>
            Sort ascending (a-z)
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSortDir.Desc">
            <summary>
            Sort descending (z-a)
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisInsert">
            <summary>
            Insert position used by Redis LINSERT command
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisInsert.Before">
            <summary>
            Insert before pivot element
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisInsert.After">
            <summary>
            Insert after pivot element
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisBitOp">
            <summary>
            Operation used by Redis BITOP command
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisBitOp.And">
            <summary>
            Bitwise AND
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisBitOp.Or">
            <summary>
            Bitwise OR
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisBitOp.XOr">
            <summary>
            Bitwise EXCLUSIVE-OR
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisBitOp.Not">
            <summary>
            Bitwise NOT
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisAggregate">
            <summary>
            Aggregation function used by Reids set operations
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisAggregate.Sum">
            <summary>
            Aggregate SUM
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisAggregate.Min">
            <summary>
            Aggregate MIN
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisAggregate.Max">
            <summary>
            Aggregate MAX
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisMessage">
            <summary>
            Redis unified message prefix
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisMessage.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisMessage.Status">
            <summary>
            Status message
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisMessage.Bulk">
            <summary>
            Bulk message
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisMessage.MultiBulk">
            <summary>
            Multi bulk message
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisMessage.Int">
            <summary>
            Int message
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSlowLog">
            <summary>
            Redis sub-command for SLOWLOG command
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSlowLog.Get">
            <summary>
            Return entries in the slow log
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSlowLog.Len">
            <summary>
            Get the length of the slow log
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSlowLog.Reset">
            <summary>
            Delete all information from the slow log
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisSubscriptionResponseType">
            <summary>
            Redis subscription response type
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSubscriptionResponseType.Subscribe">
            <summary>
            Channel subscribed
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSubscriptionResponseType.Message">
            <summary>
            Message published
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSubscriptionResponseType.Unsubscribe">
            <summary>
            Channel unsubscribed
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSubscriptionResponseType.PSubscribe">
            <summary>
            Channel pattern subscribed
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSubscriptionResponseType.PMessage">
            <summary>
            Message published to channel pattern
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisSubscriptionResponseType.PUnsubscribe">
            <summary>
            Channel pattern unsubsribed
            </summary>
        </member>
        <member name="T:ctstone.Redis.RedisExistence">
            <summary>
            Redis existence specification for SET command
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisExistence.Nx">
            <summary>
            Only set the key if it does not already exist
            </summary>
        </member>
        <member name="F:ctstone.Redis.RedisExistence.Xx">
            <summary>
            Only set the key if it already exists
            </summary>
        </member>
    </members>
</doc>
